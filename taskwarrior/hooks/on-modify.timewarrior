#!/usr/bin/env python3
###############################################################################
#
# Copyright 2015 - 2016, Paul Beckingham, Federico Hernandez.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# https://www.opensource.org/licenses/mit-license.php
#
###############################################################################

from __future__ import print_function

import os
import sys
import json
import subprocess
import iso8601

# Hook should extract all of the following for use as Timewarrior tags:
#   UUID
#   Project
#   Tags
#   Description
#   UDAs

try:
  input_stream = sys.stdin.buffer
except AttributeError:
  input_stream = sys.stdin

# Make no changes to the task, simply observe.
old = json.loads(input_stream.readline().decode("utf-8", errors="replace"))
new = json.loads(input_stream.readline().decode("utf-8", errors="replace"))
print(json.dumps(new))


def extract_tags_from(json_obj):
  # Extract attributes for use as tags.
  tags = [json_obj['description']]
  if 'project' in json_obj:
    tags.append(json_obj['project'])
  if 'tags' in json_obj:
    tags.extend(json_obj['tags'])
  return tags

def extract_annotation_from(json_obj):
  if 'annotations' not in json_obj:
    return '\'\''
  return json_obj['annotations'][0]['description']

start_or_stop = ''

# Started task.
if 'start' in new and 'start' not in old:
  start_or_stop = 'start'

# Stopped task.
elif ('start' not in new or 'end' in new) and 'start' in old:
  start_or_stop = 'stop'

# update timewarrior
if start_or_stop:
  tags = extract_tags_from(new)
  subprocess.call(['timew', start_or_stop] + tags + [':yes'])

  #Â get the timewarrior info
  export = os.popen('timew today export').read()
  parsed = json.loads(export)
  num = len(parsed)
  lastEntry = parsed[num-1]
  print("start " + lastEntry['start'])
  if 'end' in lastEntry:
    print("end " + lastEntry['end'])
    startx = iso8601.parse_date(lastEntry['start'])
    endx = iso8601.parse_date(lastEntry['end'])
    difference = endx - startx
    seconds = int(difference.total_seconds())
    print("seconds: " + str(seconds))

    # get word info
    sentencepath = os.path.expanduser('~/wordsentence.txt')
    wod = str(os.popen('jq \'.german\' ~/GermanLearning/wordofday.json').read()).rstrip().replace('"', '')
    wodtype = str(os.popen('jq \'.type\' ~/GermanLearning/wordofday.json').read().rstrip().replace('\"', '')) + "s"
    sentenceF = open(sentencepath, "r")
    example = sentenceF.readline()

    # get the word index in json
    entriespath = os.path.expanduser('~/GermanLearning/entries.json')
    targetindex = 0
    with open(entriespath, 'r') as f:
        data = json.load(f)
        getType = data['entries'][wodtype]

        for i in range(len(getType)):
            word = getType[i]
            germanword = word['german']

            if (germanword == wod):
                targetindex = i
                print("breaking..")
                break
    f.close()

    # update json file
    f2 = open(entriespath, "r+")
    data2 = json.load(f2)
    word2 = data2['entries'][wodtype][targetindex]

    if 'totaltime' in word2:
      oldnum = word2['totaltime']
      word2['totaltime'] = seconds + oldnum
      print('new Num: ' + str(seconds + oldnum))
    else:
      word2['totaltime'] = seconds
      print('NEW NUM: ' + str(seconds))

    if 'examples' in word2:
      oldexamples = word2['examples']
      oldexamples.append(example)
      print("oldexamples: " + str(oldexamples))
    else:
      word2['examples'] = [example]
      print("NEW EXAMPLE: " + str([example]))

    f2.seek(0)
    json.dump(data2, f2, indent=2)
    f2.truncate()
    f2.close()
    print("closed file")


# Modifications to task other than start/stop
elif 'start' in new and 'start' in old:

  old_tags = extract_tags_from(old)
  new_tags = extract_tags_from(new)

  if old_tags != new_tags:
      subprocess.call(['timew', 'untag', '@1'] + old_tags + [':yes'])
      subprocess.call(['timew', 'tag', '@1'] + new_tags + [':yes'])

  old_annotation = extract_annotation_from(old)
  new_annotation = extract_annotation_from(new)

  if old_annotation != new_annotation:
      subprocess.call(['timew', 'annotate', '@1', new_annotation])
