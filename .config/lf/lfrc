#set color256

# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd opend ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
	application/pdf) $OPENER $f >/dev/null 2>&1;;
        *) for f in $fx; do setsid $EDITOR $f > /dev/null 2> /dev/null & done;;
    esac
}}
map o opend

cmd processing ${{
    printf "Directory Name: "
    read name
    mkdir "$name"
    cp "../template/template.pde" "$name/$name.pde"
}}

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map r push :rename<space>

# move current file or selected files to trash folder
cmd trash %set -f; mv $fx ~/.trash

# use '<delete>' to trash
map <delete> trash

# commands
set drawbox

# map cmd open &$OPENER "$f"
